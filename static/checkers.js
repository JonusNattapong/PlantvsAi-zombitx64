// JavaScript ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡∏° Checkers (‡∏´‡∏°‡∏≤‡∏Å‡∏Æ‡∏≠‡∏ï)

// ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏Å‡∏°
let gameState = {
    board: null,
    sessionId: null,
    gameOver: false,
    winner: null,
    playerTurn: true,
    aiMode: 1, // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á
    selectedPiece: null,
    validMoves: {},
    isLoading: false,
    errorMessage: null,
    animationsEnabled: true,
    soundEnabled: true,
    lastAction: null,
    playerColor: 'white'  // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏ù‡∏±‡πà‡∏á‡∏Ç‡∏≤‡∏ß
};

// Sound effects
const SOUNDS = {
    move: '/static/sounds/move.mp3',
    capture: '/static/sounds/capture.mp3',
    win: '/static/sounds/win.mp3',
    lose: '/static/sounds/lose.mp3',
    error: '/static/sounds/error.mp3',
    select: '/static/sounds/select.mp3'
};

// DOM elements - ‡πÅ‡∏Ñ‡∏ä‡πÑ‡∏ß‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û
const gameBoard = document.getElementById('game-board');
const gameStatus = document.getElementById('status');
const newGameBtn = document.getElementById('new-game');
const changeAiBtn = document.getElementById('change-ai');
const backToMenuBtn = document.getElementById('back-to-menu');
const playAgainBtn = document.getElementById('play-again');
const returnToMenuBtn = document.getElementById('return-to-menu');
const winnerOverlay = document.getElementById('winner-overlay');
const winnerText = document.getElementById('winner-text');
const moveHistory = document.getElementById('move-history');
const animationToggle = document.getElementById('animation-toggle');
const soundToggle = document.getElementById('sound-toggle');
const playerWhiteBtn = document.getElementById('btn-player-white');
const playerBlackBtn = document.getElementById('btn-player-black');

// Statistics elements
const statsElements = {
    totalGames: document.getElementById('total-games'),
    playerWins: document.getElementById('player-wins'),
    aiWins: document.getElementById('ai-wins'),
    draws: document.getElementById('draws'),
    winRate: document.getElementById('win-rate')
};

// Game configuration
const BOARD_SIZE = 8;
const SQUARE_SIZE = 60; // ‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ç‡∏≠‡∏á‡∏ä‡πà‡∏≠‡∏á‡∏ö‡∏ô‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏ô

// ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏°
function initGame() {
    try {
        console.log('Initializing Checkers game...');
        
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á sessionId
        gameState.sessionId = generateSessionId();
        
        // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÇ‡∏´‡∏°‡∏î AI ‡∏à‡∏≤‡∏Å URL parameters (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
        const urlParams = new URLSearchParams(window.location.search);
        const aiParam = urlParams.get('ai');
        if (aiParam !== null) {
            gameState.aiMode = parseInt(aiParam);
        }
        
        // ‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡πà‡∏≤‡∏û‡∏£‡∏µ‡πÄ‡∏ü‡∏≠‡πÄ‡∏£‡∏ô‡∏ã‡πå‡∏à‡∏≤‡∏Å localStorage
        loadPreferences();
        
        // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏°‡πÉ‡∏´‡∏°‡πà
        startNewGame();
        
        // ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
        loadGameStats();
        
        // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ event listeners
        setupEventListeners();
        
        console.log('Checkers game initialized successfully');
    } catch (error) {
        console.error('Error initializing Checkers game:', error);
        showErrorMessage('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏Å‡∏° ‡πÇ‡∏õ‡∏£‡∏î‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏´‡∏ô‡πâ‡∏≤');
    }
}

// ‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡πà‡∏≤‡∏û‡∏£‡∏µ‡πÄ‡∏ü‡∏≠‡πÄ‡∏£‡∏ô‡∏ã‡πå‡∏à‡∏≤‡∏Å localStorage
function loadPreferences() {
    // ‡πÇ‡∏´‡∏•‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÅ‡∏≠‡∏ô‡∏¥‡πÄ‡∏°‡∏ä‡∏±‡∏ô
    if (localStorage.getItem('checkersAnimationsEnabled') !== null) {
        gameState.animationsEnabled = localStorage.getItem('checkersAnimationsEnabled') === 'true';
        updateAnimationToggle();
    }
    
    // ‡πÇ‡∏´‡∏•‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏™‡∏µ‡∏¢‡∏á
    if (localStorage.getItem('checkersSoundEnabled') !== null) {
        gameState.soundEnabled = localStorage.getItem('checkersSoundEnabled') === 'true';
        updateSoundToggle();
    }
}

// ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î‡πÅ‡∏≠‡∏ô‡∏¥‡πÄ‡∏°‡∏ä‡∏±‡∏ô
function updateAnimationToggle() {
    if (animationToggle) {
        animationToggle.textContent = gameState.animationsEnabled ? 
            '‚ú® ‡πÄ‡∏≠‡∏ü‡πÄ‡∏ü‡∏Å‡∏ï‡πå: ‡πÄ‡∏õ‡∏¥‡∏î' : '‚ú® ‡πÄ‡∏≠‡∏ü‡πÄ‡∏ü‡∏Å‡∏ï‡πå: ‡∏õ‡∏¥‡∏î';
    }
    
    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏£‡∏∑‡∏≠‡∏•‡∏ö‡∏Ñ‡∏•‡∏≤‡∏™‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏≠‡∏ô‡∏¥‡πÄ‡∏°‡∏ä‡∏±‡∏ô
    document.body.classList.toggle('animations-disabled', !gameState.animationsEnabled);
}

// ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î‡πÄ‡∏™‡∏µ‡∏¢‡∏á
function updateSoundToggle() {
    if (soundToggle) {
        soundToggle.textContent = gameState.soundEnabled ? 'üîä' : 'üîá';
    }
}

// ‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î‡πÅ‡∏≠‡∏ô‡∏¥‡πÄ‡∏°‡∏ä‡∏±‡∏ô
function toggleAnimations() {
    gameState.animationsEnabled = !gameState.animationsEnabled;
    updateAnimationToggle();
    
    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡πà‡∏≤‡∏û‡∏£‡∏µ‡πÄ‡∏ü‡∏≠‡πÄ‡∏£‡∏ô‡∏ã‡πå
    localStorage.setItem('checkersAnimationsEnabled', gameState.animationsEnabled.toString());
}

// ‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î‡πÄ‡∏™‡∏µ‡∏¢‡∏á
function toggleSound() {
    gameState.soundEnabled = !gameState.soundEnabled;
    updateSoundToggle();
    
    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡πà‡∏≤‡∏û‡∏£‡∏µ‡πÄ‡∏ü‡∏≠‡πÄ‡∏£‡∏ô‡∏ã‡πå
    localStorage.setItem('checkersSoundEnabled', gameState.soundEnabled.toString());
}

// ‡∏™‡∏£‡πâ‡∏≤‡∏á sessionId ‡πÅ‡∏ö‡∏ö‡∏™‡∏∏‡πà‡∏°‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô
function generateSessionId() {
    const timestamp = new Date().getTime().toString(36);
    const randomPart = Math.random().toString(36).substring(2, 10);
    return `${timestamp}-${randomPart}`;
}

// ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
function showErrorMessage(message) {
    gameState.errorMessage = message;
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ element ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏´‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
    let errorElement = document.getElementById('game-error-message');
    if (!errorElement) {
        errorElement = document.createElement('div');
        errorElement.id = 'game-error-message';
        errorElement.className = 'bg-red-500 text-white p-3 rounded-lg fixed top-4 right-4 z-50 shadow-lg';
        document.body.appendChild(errorElement);
    }
    
    errorElement.textContent = message;
    errorElement.style.display = 'block';
    
    // ‡∏ã‡πà‡∏≠‡∏ô‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å 5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
    setTimeout(() => {
        errorElement.style.display = 'none';
    }, 5000);
}

// ‡πÅ‡∏™‡∏î‡∏á/‡∏ã‡πà‡∏≠‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î
function updateLoadingState(isLoading) {
    gameState.isLoading = isLoading;
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏ï‡∏±‡∏ß‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î
    let loaderElement = document.getElementById('game-loader');
    
    if (isLoading) {
        if (!loaderElement) {
            loaderElement = document.createElement('div');
            loaderElement.id = 'game-loader';
            loaderElement.className = 'fixed top-0 left-0 right-0 bottom-0 bg-black bg-opacity-50 flex items-center justify-center z-50';
            loaderElement.innerHTML = `
                <div class="bg-dark-secondary p-4 rounded-lg shadow-lg flex flex-col items-center">
                    <div class="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-primary"></div>
                    <p class="mt-2 text-white">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î...</p>
                </div>
            `;
            document.body.appendChild(loaderElement);
        } else {
            loaderElement.style.display = 'flex';
        }
    } else if (loaderElement) {
        loaderElement.style.display = 'none';
    }
}

// ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÄ‡∏≠‡∏ü‡πÄ‡∏ü‡∏Å‡∏ï‡πå
function playSound(soundName) {
    if (!gameState.soundEnabled) return;
    
    try {
        const audio = new Audio(SOUNDS[soundName]);
        audio.play().catch(err => console.warn('Sound play error:', err));
    } catch (error) {
        console.warn(`Error playing sound ${soundName}:`, error);
    }
}

// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏ô‡πÄ‡∏Å‡∏°
function createBoard() {
    if (!gameBoard) return;
    
    // ‡∏•‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏ô‡πÄ‡∏î‡∏¥‡∏°
    gameBoard.innerHTML = '';
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà
    for (let row = 0; row < BOARD_SIZE; row++) {
        for (let col = 0; col < BOARD_SIZE; col++) {
            const square = document.createElement('div');
            const isLight = (row + col) % 2 === 0;
            
            // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î class ‡∏ï‡∏≤‡∏°‡∏™‡∏µ‡∏Ç‡∏≠‡∏á‡∏ä‡πà‡∏≠‡∏á (‡∏™‡∏•‡∏±‡∏ö‡∏™‡∏µ‡∏Ç‡∏≤‡∏ß-‡∏î‡∏≥)
            square.className = `aspect-square relative ${isLight ? 'bg-board-light' : 'bg-board-dark'}`;
            square.dataset.row = row;
            square.dataset.col = col;
            
            // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏ô
            gameBoard.appendChild(square);
        }
    }
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏°‡∏≤‡∏Å‡∏ö‡∏ô‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏ô
    if (gameState.board) {
        updateBoard();
    }
}

// ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏ô‡∏à‡∏≤‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏Å‡∏°
function updateBoard() {
    if (!gameBoard || !gameState.board) return;
    
    // Reset all squares
    const squares = gameBoard.querySelectorAll('div');
    squares.forEach(square => {
        // ‡πÄ‡∏Å‡πá‡∏ö class ‡∏™‡∏µ‡∏Ç‡∏≠‡∏á‡∏ä‡πà‡∏≠‡∏á‡πÑ‡∏ß‡πâ
        const isLight = square.classList.contains('bg-board-light');
        square.className = `aspect-square relative ${isLight ? 'bg-board-light' : 'bg-board-dark'}`;
        
        // ‡∏•‡πâ‡∏≤‡∏á‡∏´‡∏°‡∏≤‡∏Å
        const piece = square.querySelector('.piece');
        if (piece) {
            square.removeChild(piece);
        }
    });
    
    // ‡πÉ‡∏™‡πà‡∏´‡∏°‡∏≤‡∏Å‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏Å‡∏°
    for (let row = 0; row < BOARD_SIZE; row++) {
        for (let col = 0; col < BOARD_SIZE; col++) {
            const pieceType = gameState.board[row][col];
            if (pieceType !== 0) {
                const square = getSquare(row, col);
                
                if (square) {
                    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏°‡∏≤‡∏Å
                    const piece = document.createElement('div');
                    
                    // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏Å
                    const isWhite = pieceType === 1 || pieceType === 3;
                    const isKing = pieceType === 3 || pieceType === 4;
                    
                    piece.className = `piece ${isWhite ? 'piece-white' : 'piece-black'} ${isKing ? 'king' : ''}`;
                    
                    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏°‡∏≤‡∏Å‡∏•‡∏á‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á
                    square.appendChild(piece);
                    
                    // ‡πÄ‡∏û‡∏¥‡πà‡∏° class ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
                    if (gameState.selectedPiece && 
                        gameState.selectedPiece.row === row && 
                        gameState.selectedPiece.col === col) {
                        square.classList.add('piece-selected');
                    }
                }
            }
        }
    }
    
    // ‡πÅ‡∏™‡∏î‡∏á‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏î‡∏¥‡∏ô‡πÑ‡∏î‡πâ
    if (gameState.selectedPiece && gameState.validMoves) {
        Object.entries(gameState.validMoves).forEach(([key, moveInfo]) => {
            const [toRow, toCol] = key.split(',').map(Number);
            const square = getSquare(toRow, toCol);
            if (square) {
                square.classList.add('valid-move');
            }
        });
    }
    
    // ‡∏ñ‡πâ‡∏≤‡πÅ‡∏≠‡∏ô‡∏¥‡πÄ‡∏°‡∏ä‡∏±‡∏ô‡∏ñ‡∏π‡∏Å‡∏õ‡∏¥‡∏î ‡πÉ‡∏´‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏° class ‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö body
    document.body.classList.toggle('animations-disabled', !gameState.animationsEnabled);
}

// ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏Å‡∏°
function updateGameStatus() {
    if (!gameStatus) return;
    
    let statusText = '';
    
    if (gameState.gameOver) {
        if (gameState.winner === 'player') {
            statusText = '<span class="text-green-500">‡∏Ñ‡∏∏‡∏ì‡∏ä‡∏ô‡∏∞!</span> ';
        } else if (gameState.winner === 'ai') {
            statusText = '<span class="text-red-500">AI ‡∏ä‡∏ô‡∏∞!</span> ';
        } else {
            statusText = '<span class="text-yellow-500">‡πÄ‡∏™‡∏°‡∏≠!</span> ';
        }
    } else {
        if (gameState.playerTurn) {
            statusText = '‡∏ï‡∏≤‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì';
        } else {
            statusText = 'AI ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡∏¥‡∏î...';
        }
    }
    
    gameStatus.innerHTML = statusText;
}

// ‡πÅ‡∏™‡∏î‡∏á overlay ‡∏ú‡∏π‡πâ‡∏ä‡∏ô‡∏∞
function showWinnerOverlay(message) {
    if (winnerText && winnerOverlay) {
        winnerText.innerHTML = message;
        winnerOverlay.classList.remove('hidden');
    }
}

// ‡∏ã‡πà‡∏≠‡∏ô overlay ‡∏ú‡∏π‡πâ‡∏ä‡∏ô‡∏∞
function hideWinnerOverlay() {
    if (winnerOverlay) {
        winnerOverlay.classList.add('hidden');
    }
}

// ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏°‡πÉ‡∏´‡∏°‡πà
function startNewGame() {
    try {
        // ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡πà‡∏≤ AI mode ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
        const data = {
            ai_mode: gameState.aiMode,
            session_id: gameState.sessionId,
            player_color: gameState.playerColor
        };
        
        // ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î
        updateLoadingState(true);
        
        // ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÑ‡∏õ‡∏¢‡∏±‡∏á API
        fetch('/api/checkers/new_game', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(data)
        })
        .then(response => response.json())
        .then(data => {
            // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏Å‡∏°‡πÉ‡∏´‡∏°‡πà
            gameState.board = data.board;
            gameState.playerTurn = data.player_turn;
            gameState.gameOver = false;
            gameState.winner = null;
            gameState.selectedPiece = null;
            gameState.validMoves = {};
            
            // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
            createBoard();
            updateGameStatus();
            updateBoard();
            
            // ‡∏•‡πâ‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏´‡∏≤‡∏Å‡∏°‡∏µ
            if (moveHistory) {
                moveHistory.innerHTML = '<div class="text-center p-2 text-gray-400">‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà</div>';
            }
            
            // ‡∏ã‡πà‡∏≠‡∏ô overlay
            hideWinnerOverlay();
            
            // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô log
            console.log('‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏°‡πÉ‡∏´‡∏°‡πà:', data);
        })
        .catch(error => {
            console.error('Error starting new game:', error);
            showErrorMessage('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏°‡πÉ‡∏´‡∏°‡πà');
        })
        .finally(() => {
            updateLoadingState(false);
        });
    } catch (error) {
        console.error('Error in startNewGame:', error);
        showErrorMessage('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏°‡πÉ‡∏´‡∏°‡πà');
        updateLoadingState(false);
    }
}

// ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏ä‡πà‡∏≠‡∏á‡∏ö‡∏ô‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏ô
function handleSquareClick(event) {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (gameState.isLoading || gameState.gameOver || !gameState.playerTurn) {
        return;
    }
    
    const square = event.target.closest('[data-row]');
    if (!square) return;
    
    const row = parseInt(square.dataset.row);
    const col = parseInt(square.dataset.col);
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏´‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏î‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (gameState.selectedPiece) {
        // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏´‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏î‡∏¥‡∏ô‡πÑ‡∏î‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        const key = `${row},${col}`;
        
        if (gameState.validMoves && gameState.validMoves[key]) {
            // ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà
            makeMove(
                gameState.selectedPiece.row,
                gameState.selectedPiece.col,
                row,
                col
            );
        } else if (gameState.board[row][col] !== 0) {
            // ‡∏ñ‡πâ‡∏≤‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏´‡∏°‡∏≤‡∏Å‡∏ï‡∏±‡∏ß‡∏≠‡∏∑‡πà‡∏ô ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å (‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏°‡∏≤‡∏Å‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô)
            const pieceType = gameState.board[row][col];
            const isPlayerPiece = (gameState.playerColor === 'white' && (pieceType === 1 || pieceType === 3)) ||
                              (gameState.playerColor === 'black' && (pieceType === 2 || pieceType === 4));
            
            if (isPlayerPiece) {
                selectPiece(row, col);
            }
        } else {
            // ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏î‡∏¥‡∏ô‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ ‡πÉ‡∏´‡πâ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
            clearSelection();
        }
    } else {
        // ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏´‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å ‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏≤‡∏Å‡∏ñ‡πâ‡∏≤‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏´‡∏°‡∏≤‡∏Å‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô
        const pieceType = gameState.board[row][col];
        if (pieceType === 0) return; // ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏´‡∏°‡∏≤‡∏Å
        
        const isPlayerPiece = (gameState.playerColor === 'white' && (pieceType === 1 || pieceType === 3)) ||
                          (gameState.playerColor === 'black' && (pieceType === 2 || pieceType === 4));
        
        if (isPlayerPiece) {
            selectPiece(row, col);
        }
    }
}

// ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏≤‡∏Å
function selectPiece(row, col) {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (gameState.isLoading) return;
    
    // ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
    playSound('select');
    
    // ‡∏•‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏î‡∏¥‡∏°
    clearSelection();
    
    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏´‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
    gameState.selectedPiece = { row, col };
    
    // ‡∏Ç‡∏≠‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
    getValidMoves(row, col);
    
    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ö‡∏ô‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏ô
    updateBoard();
}

// ‡∏•‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
function clearSelection() {
    gameState.selectedPiece = null;
    gameState.validMoves = {};
    
    // ‡∏•‡πâ‡∏≤‡∏á class piece-selected ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ó‡∏∏‡∏Å‡∏ä‡πà‡∏≠‡∏á
    const squares = gameBoard.querySelectorAll('.piece-selected, .valid-move');
    squares.forEach(square => {
        square.classList.remove('piece-selected');
        square.classList.remove('valid-move');
    });
}

// ‡∏£‡∏±‡∏ö‡∏ä‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á
function getSquare(row, col) {
    return gameBoard.querySelector(`[data-row="${row}"][data-col="${col}"]`);
}

// ‡∏Ç‡∏≠‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏à‡∏≤‡∏Å API
function getValidMoves(row, col) {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (gameState.isLoading) return;
    
    updateLoadingState(true);
    
    fetch('/api/checkers/valid_moves', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({
            session_id: gameState.sessionId,
            row: row,
            col: col
        })
    })
    .then(response => response.json())
    .then(data => {
        if (data.error) {
            throw new Error(data.error);
        }
        
        gameState.validMoves = data.valid_moves;
        updateBoard();
    })
    .catch(error => {
        console.error('Error getting valid moves:', error);
        showErrorMessage('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏î‡πâ');
        clearSelection();
    })
    .finally(() => {
        updateLoadingState(false);
    });
}

// ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà
function makeMove(fromRow, fromCol, toRow, toCol) {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (gameState.isLoading) return;
    
    updateLoadingState(true);
    
    fetch('/api/checkers/move', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({
            session_id: gameState.sessionId,
            from_row: fromRow,
            from_col: fromCol,
            to_row: toRow,
            to_col: toCol
        })
    })
    .then(response => response.json())
    .then(data => {
        if (data.error) {
            throw new Error(data.error);
        }
        
        // ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà
        if (data.captured) {
            playSound('capture');
        } else {
            playSound('move');
        }
        
        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏Å‡∏°
        gameState.board = data.board;
        gameState.playerTurn = data.player_turn;
        gameState.gameOver = data.game_over;
        gameState.winner = data.winner;
        
        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà
        if (moveHistory && data.last_move) {
            // ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà" ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
            if (moveHistory.querySelector('.text-gray-400')) {
                moveHistory.innerHTML = '';
            }
            
            const moveEntry = document.createElement('div');
            moveEntry.className = 'p-1 border-b border-gray-700';
            
            // ‡πÅ‡∏õ‡∏•‡∏á row, col ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÅ‡∏ö‡∏ö‡∏´‡∏°‡∏≤‡∏Å‡∏Æ‡∏≠‡∏ï (‡πÄ‡∏ä‡πà‡∏ô A1, B2)
            const cols = 'ABCDEFGH';
            const fromPosition = `${cols[fromCol]}${8-fromRow}`;
            const toPosition = `${cols[toCol]}${8-toRow}`;
            
            const playerName = data.last_move.player === 'player' ? '‡∏Ñ‡∏∏‡∏ì' : 'AI';
            const captureText = data.captured ? ' ‡∏Å‡∏¥‡∏ô! ' : '';
            
            moveEntry.innerHTML = `<span class="${data.last_move.player === 'player' ? 'text-blue-400' : 'text-red-400'}">${playerName}</span>: ${fromPosition} ‚Üí ${toPosition}${captureText}`;
            
            moveHistory.insertBefore(moveEntry, moveHistory.firstChild);
        }
        
        // ‡∏•‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
        clearSelection();
        
        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
        updateBoard();
        updateGameStatus();
        
        // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏Å‡∏°‡∏à‡∏ö‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á overlay
        if (data.game_over) {
            let winMessage = '';
            if (data.winner === 'player') {
                winMessage = '<span class="text-green-500 text-2xl">‡∏Ñ‡∏∏‡∏ì‡∏ä‡∏ô‡∏∞! </span><br>‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏î‡πâ‡∏ß‡∏¢!';
                playSound('win');
            } else if (data.winner === 'ai') {
                winMessage = '<span class="text-red-500 text-2xl">AI ‡∏ä‡∏ô‡∏∞! </span><br>‡∏•‡∏≠‡∏á‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á!';
                playSound('lose');
            } else {
                winMessage = '<span class="text-yellow-500 text-2xl">‡πÄ‡∏™‡∏°‡∏≠! </span><br>‡πÄ‡∏Å‡∏°‡∏ó‡∏µ‡πà‡∏™‡∏π‡∏™‡∏µ!';
            }
            
            // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡πà‡∏ô
            loadGameStats();
            
            // ‡πÅ‡∏™‡∏î‡∏á overlay ‡∏ú‡∏π‡πâ‡∏ä‡∏ô‡∏∞
            setTimeout(() => {
                showWinnerOverlay(winMessage);
            }, 500);
        }
    })
    .catch(error => {
        console.error('Error making move:', error);
        showErrorMessage('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ');
        clearSelection();
    })
    .finally(() => {
        updateLoadingState(false);
    });
}

// ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÄ‡∏Å‡∏°
function loadGameStats() {
    fetch('/api/get_stats?game_type=Checkers')
    .then(response => response.json())
    .then(data => {
        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
        statsElements.totalGames.textContent = data.total_games;
        statsElements.playerWins.textContent = data.player_wins;
        statsElements.aiWins.textContent = data.ai_wins;
        statsElements.draws.textContent = data.draws;
        statsElements.winRate.textContent = data.win_rate + '%';
    })
    .catch(error => {
        console.error('Error loading game stats:', error);
    });
}

// ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÇ‡∏´‡∏°‡∏î AI
function changeAiMode() {
    const newMode = parseInt(aiModeSelect.value);
    
    fetch('/api/change_ai_mode', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({
            session_id: gameState.sessionId,
            ai_mode: newMode
        })
    })
    .then(response => response.json())
    .then(data => {
        if (data.error) {
            console.error('Error changing AI mode:', data.error);
            return;
        }
        
        gameState.aiMode = data.ai_mode;
        alert(`‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏≠‡∏±‡∏•‡∏Å‡∏≠‡∏£‡∏¥‡∏ó‡∏∂‡∏° AI ‡πÄ‡∏õ‡πá‡∏ô ${getAiModeName(gameState.aiMode)}`);
    })
    .catch(error => {
        console.error('Error changing AI mode:', error);
    });
}

// ‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏´‡∏°‡∏î AI
function getAiModeName(mode) {
    const modes = [
        "Minimax",
        "Pattern Recognition",
        "Q-Learning",
        "Neural Network",
        "MCTS",
        "Genetic Algorithm"
    ];
    return modes[mode] || "Unknown";
}

// ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ event listeners
function setupEventListeners() {
    // ‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏°‡πÉ‡∏´‡∏°‡πà
    newGameBtn.addEventListener('click', startNewGame);
    
    // ‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô AI
    changeAiBtn.addEventListener('click', changeAiMode);
    
    // ‡∏õ‡∏∏‡πà‡∏°‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÄ‡∏°‡∏ô‡∏π
    backToMenuBtn.addEventListener('click', () => {
        window.location.href = '/';
    });
    
    // ‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏•‡πà‡∏ô‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÉ‡∏ô overlay
    playAgainBtn.addEventListener('click', () => {
        hideWinnerOverlay();
        startNewGame();
    });
    
    // ‡∏õ‡∏∏‡πà‡∏°‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏°‡∏ô‡∏π‡πÉ‡∏ô overlay
    returnToMenuBtn.addEventListener('click', () => {
        window.location.href = '/';
    });
    
    // ‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏´‡∏°‡∏î AI
    aiModeSelect.addEventListener('change', () => {
        gameState.aiMode = parseInt(aiModeSelect.value);
    });
}

// ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏Å‡∏°‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏™‡∏£‡πá‡∏à
document.addEventListener('DOMContentLoaded', initGame);
